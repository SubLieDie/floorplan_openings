import gradio as gr
from ultralytics import YOLO
from PIL import Image, ImageDraw, ImageFont
import numpy as np
import pandas as pd
import os
from datetime import datetime
import glob
import zipfile
from bs4 import BeautifulSoup
from PIL import ImageColor

# –ü—É—Ç—å –∫ —à—Ä–∏—Ñ—Ç—É –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
FONT_PATH = "/fonts/Arial.ttf"

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
model = YOLO("model.pt")

# –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è
TITLE = "Architectural Elements Detector"
DESCRIPTION = """
<h2>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–∫–æ–Ω –∏ –¥–≤–µ—Ä–µ–π –Ω–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã—Ö –ø–ª–∞–Ω–∞—Ö</h2>
<p>–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–∞—Ä—É–∂–∏—Ç –∏ –ø—Ä–æ–Ω—É–º–µ—Ä—É–µ—Ç –≤—Å–µ –æ–∫–Ω–∞ –∏ –¥–≤–µ—Ä–∏.</p>
"""
THEME = "soft"
ALLOWED_TYPES = ["image/png", "image/jpeg", "image/jpg"]

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
STYLE = {
    "window": {"color": "#1f77b4", "text": "–û–∫–Ω–æ", "emoji": "ü™ü"},
    "door": {"color": "#2ca02c", "text": "–î–≤–µ—Ä—å", "emoji": "üö™"},
    "font_size": 14,
    "border_width": 3,
}


def load_font():
    """–ó–∞–≥—Ä—É–∑–∫–∞ —à—Ä–∏—Ñ—Ç–∞ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —É—Ä–æ–≤–Ω—è–º–∏ fallback"""
    try:
        return ImageFont.truetype(FONT_PATH, STYLE["font_size"])
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —à—Ä–∏—Ñ—Ç {FONT_PATH}: {str(e)}")
        try:
            return ImageFont.truetype("arial.ttf", STYLE["font_size"])
        except:
            return ImageFont.load_default()


def detect_objects(image: Image.Image):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Ç–æ—á–Ω—ã—Ö –º–∞—Å–æ–∫ YOLO-seg"""
    try:
        img_w, img_h = image.size
        img_array = np.array(image)
        results = model(img_array)[0]
        names = model.names
        masks = results.masks
        boxes = results.boxes

        if masks is None or masks.data is None:
            return image, "‚ö† –ú–∞—Å–∫–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã", "<p>–ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤</p>"

        img_draw = image.convert("RGBA").copy()
        overlay = Image.new("RGBA", image.size, (255, 255, 255, 0))
        draw = ImageDraw.Draw(overlay)
        font = load_font()

        mask_data = masks.data.cpu().numpy()
        counts = {"window": 0, "door": 0}
        elements_data = []

        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤ –º–∞—Å–æ–∫
        if hasattr(masks, 'cls') and masks.cls is not None:
            mask_classes = masks.cls.cpu().tolist()
        elif len(mask_data) == len(boxes.cls):
            mask_classes = boxes.cls.cpu().tolist()
        else:
            return image, "‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–ª–∞—Å—Å—ã –º–∞—Å–æ–∫", "<p>–û—à–∏–±–∫–∞ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –º–∞—Å–æ–∫ –∏ –∫–ª–∞—Å—Å–æ–≤</p>"

        for i, mask_np in enumerate(mask_data):
            cls = int(mask_classes[i])
            conf = float(boxes.conf[i]) if i < len(boxes.conf) else 1.0
            label = names[cls]

            if label not in STYLE:
                continue

            counts[label] += 1
            number = counts[label]
            element_type = STYLE[label]

            # Resize mask –¥–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            mask_img = Image.fromarray((mask_np * 255).astype(np.uint8)).resize((img_w, img_h), resample=Image.BILINEAR)
            mask_np_resized = np.array(mask_img) > 127

            # –ö–æ–Ω—Ç—É—Ä–Ω–∞—è –º–∞—Å–∫–∞
            color_rgb = ImageColor.getrgb(element_type["color"])
            colored_mask = Image.new("RGBA", (img_w, img_h), (*color_rgb, 100))
            overlay.paste(colored_mask, mask=mask_img)

            # Bounding box –∏ —Ü–µ–Ω—Ç—Ä–æ–∏–¥
            y_indices, x_indices = np.where(mask_np_resized)
            if len(x_indices) == 0 or len(y_indices) == 0:
                continue
            x1, y1, x2, y2 = int(np.min(x_indices)), int(np.min(y_indices)), int(np.max(x_indices)), int(np.max(y_indices))
            cx, cy = int(np.mean(x_indices)), int(np.mean(y_indices))

            elements_data.append({
                "–¢–∏–ø": element_type["text"],
                "–ù–æ–º–µ—Ä": number,
                "X1": x1, "Y1": y1, "X2": x2, "Y2": y2,
                "–®–∏—Ä–∏–Ω–∞": x2 - x1, "–í—ã—Å–æ—Ç–∞": y2 - y1,
                "–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å": f"{conf:.2f}"
            })

            # –ü–æ–¥–ø–∏—Å—å –≤ —Ü–µ–Ω—Ç—Ä –º–∞—Å–∫–∏
            label_text = f"{element_type['emoji']} {element_type['text']} {number}"
            text_bbox = draw.textbbox((cx, cy), label_text, font=font)
            tw, th = text_bbox[2] - text_bbox[0], text_bbox[3] - text_bbox[1]
            draw.rectangle([cx, cy, cx + tw + 6, cy + th + 6], fill=(255, 255, 255, 220))
            draw.text((cx + 3, cy + 3), label_text, fill=element_type["color"], font=font)

        # –§–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        img_result = Image.alpha_composite(img_draw, overlay).convert("RGB")
        df = pd.DataFrame(elements_data)
        summary_text = f"‚úÖ –ù–∞–π–¥–µ–Ω–æ: {counts['window']} –æ–∫–æ–Ω, {counts['door']} –¥–≤–µ—Ä–µ–π"
        table_html = df.to_html(index=False, classes="dataframe", border=0) if not df.empty else "<p>–ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤</p>"

        return img_result, summary_text, table_html

    except Exception as e:
        error_msg = f"‚ö† –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}"
        return image, error_msg, "<p>–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ</p>"

def create_results_zip():
    """–°–æ–∑–¥–∞–µ—Ç ZIP-–∞—Ä—Ö–∏–≤ —Å–æ –≤—Å–µ–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏"""
    try:
        os.makedirs("/app/results", exist_ok=True)
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        zip_filename = f"results_{timestamp}.zip"
        zip_path = f"/app/results/{zip_filename}"

        with zipfile.ZipFile(zip_path, 'w', zipfile.ZIP_DEFLATED) as zipf:
            for root, _, files in os.walk("/app/results"):
                for file in files:
                    if not file.endswith('.zip'):
                        file_path = os.path.join(root, file)
                        arcname = os.path.relpath(file_path, "/app/results")
                        zipf.write(file_path, arcname)

        return zip_path
    except Exception as e:
        print(f"Error creating zip: {str(e)}")
        return None


def save_results(image: Image.Image, output_image, summary, table):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        os.makedirs("results", exist_ok=True)
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        save_messages = []

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        try:
            img_path = f"results/result_{timestamp}.png"
            if isinstance(output_image, np.ndarray):
                output_image = Image.fromarray(output_image)
            output_image.save(img_path)
            save_messages.append(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {img_path}")
        except Exception as img_error:
            save_messages.append(f"‚ö† –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(img_error)}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        if table:
            try:
                soup = BeautifulSoup(table, 'html.parser')
                rows = soup.find_all('tr')
                data = []
                headers = [th.get_text() for th in rows[0].find_all('th')]

                for row in rows[1:]:
                    data.append([td.get_text() for td in row.find_all('td')])

                df = pd.DataFrame(data, columns=headers)

                csv_path = f"results/data_{timestamp}.csv"
                df.to_csv(csv_path, index=False, encoding='utf-8-sig')
                save_messages.append(f"–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã (CSV): {csv_path}")

                json_path = f"results/data_{timestamp}.json"
                df.to_json(json_path, orient='records', indent=2, force_ascii=False)
                save_messages.append(f"–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã (JSON): {json_path}")

            except Exception as data_error:
                try:
                    html_path = f"results/data_{timestamp}.html"
                    with open(html_path, 'w', encoding='utf-8') as f:
                        f.write(table)
                    save_messages.append(f"–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã (HTML): {html_path}")
                except Exception as html_error:
                    save_messages.append(f"‚ö† –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {str(html_error)}")

        # –°–æ–∑–¥–∞–µ–º ZIP-–∞—Ä—Ö–∏–≤
        zip_path = create_results_zip()
        return "\n".join(save_messages), zip_path

    except Exception as e:
        return f"‚õî –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {str(e)}", None


def download_results():
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    zip_path = create_results_zip()
    if zip_path and os.path.exists(zip_path):
        return zip_path
    return None


# –ö–∞—Å—Ç–æ–º–Ω—ã–π CSS
custom_css = """
.dataframe {
    width: 100%;
    border-collapse: collapse;
    margin: 10px 0;
    font-family: Arial, sans-serif;
}
.dataframe th {
    background-color: #2a2d2e;
    padding: 10px;
    text-align: left;
    font-weight: bold;
    color: #ffffff;
    border-bottom: 2px solid #444;
}
.dataframe td {
    padding: 8px;
    border-bottom: 1px solid #444;
    color: #e0e0e0;
}
.dataframe tr:hover {
    background-color: #3a3d3e;
}
.download-btn {
    background: linear-gradient(45deg, #4CAF50, #2E7D32);
    color: white !important;
    border: none !important;
}
.download-btn:hover {
    background: linear-gradient(45deg, #2E7D32, #1B5E20) !important;
}
"""

# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å Gradio
with gr.Blocks(title=TITLE, theme=THEME, css=custom_css) as demo:
    gr.Markdown(DESCRIPTION)

    with gr.Row():
        with gr.Column():
            input_image = gr.Image(type="pil", label="–ó–∞–≥—Ä—É–∑–∏—Ç–µ –ø–ª–∞–Ω", height=400)
            submit_btn = gr.Button("–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å", variant="primary")  # <-- –î–æ–±–∞–≤–ª–µ–Ω–æ

        with gr.Column():
            output_image = gr.Image(type="pil", label="–†–µ–∑—É–ª—å—Ç–∞—Ç", height=400)
            summary = gr.Textbox(label="–°–≤–æ–¥–∫–∞")
            results_table = gr.HTML(label="–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è")

    with gr.Row():
        save_btn = gr.Button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", variant="primary")
        download_btn = gr.Button("üì• –°–∫–∞—á–∞—Ç—å –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", elem_classes="download-btn")

    save_output = gr.Textbox(label="–°—Ç–∞—Ç—É—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
    download_output = gr.File(label="–ê—Ä—Ö–∏–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤", visible=True)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π (—Ç–µ–ø–µ—Ä—å —ç—Ç–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã)
    submit_btn.click(
        fn=detect_objects,
        inputs=input_image,
        outputs=[output_image, summary, results_table]
    )

    save_btn.click(
        fn=save_results,
        inputs=[input_image, output_image, summary, results_table],
        outputs=[save_output, download_output]
    )

    download_btn.click(
        fn=download_results,
        outputs=download_output
    )

    # –ü—Ä–∏–º–µ—Ä—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    gr.Examples(
        examples=["example1.jpg", "example2.png"],
        inputs=input_image,
        label="–ü—Ä–∏–º–µ—Ä—ã –ø–ª–∞–Ω–æ–≤ (–Ω–∞–∂–º–∏—Ç–µ —á—Ç–æ–±—ã –∑–∞–≥—Ä—É–∑–∏—Ç—å)"
    )

if __name__ == "__main__":
    demo.launch(
        server_name="0.0.0.0",
        server_port=7860,
        favicon_path="favicon.ico.png",
        share=False
    )
